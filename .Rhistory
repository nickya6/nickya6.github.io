scale_fill_manual(values = c("CrudeOil" = "red", "Taxes" = "purple",
"DistributionMarketing" = "green", "Refining" = "blue")) +
labs(title = 'Gasoline Pump Components History',
x = 'Month',
y = 'Retail Price (Dollars per gallon)',
fill = 'Components') +
theme_minimal()
p
p <- ggplot(eia_table_long, aes(x = Date, y = value, fill = variable)) +
geom_area() +
scale_fill_brewer(palette = "Set2") +
theme_minimal() +
theme(legend.position = "top") +
guides(fill=guide_legend(title="Components")) +
labs(title = "Gasoline Pump Components History",
x = "Month",
y = "Retail Price (Dollars per gallon)") +
annotate("text", x = Inf, y = Inf, label = "1. Crude Oil\n2. Taxes\n3. Distribution & Marketing\n4. Refining",
hjust = 1, vjust = 1, size = 3) +
annotate("text", x = Inf, y = 0, label = "Source: U.S. Energy Information Agency",
hjust = 1, vjust = 0, size = 2.5, colour = "grey50")
p
p <- ggplot(eia_table_long, aes(x = Date, y = value, fill = variable)) +
geom_area() +
scale_fill_manual(values = c("CrudeOil" = "red", "Taxes" = "purple",
"DistributionMarketing" = "green", "Refining" = "blue")) +
guides(fill=guide_legend(title="Components")) +
labs(title = "Gasoline Pump Components History",
x = "Month",
y = "Retail Price (Dollars per gallon)") +
theme_minimal()
p
theme_minimal()
p <- ggplot(eia_table_long, aes(x = Date, y = value, fill = variable)) +
geom_area() +
scale_fill_manual(values = c("CrudeOil" = "red", "Taxes" = "purple",
"DistributionMarketing" = "green", "Refining" = "blue")) +
guides(fill=guide_legend(title="Components")) +
labs(title = "Gasoline Pump Components History",
x = "Month",
y = "Retail Price (Dollars per gallon)") +
annotate("text", x = Inf, y = Inf, label = "1. Crude Oil\n2. Taxes\n3. Distribution & Marketing\n4. Refining",
hjust = 1, vjust = 1, size = 3) +
annotate("text", x = Inf, y = 0, label = "Source: U.S. Energy Information Agency",
hjust = 1, vjust = 0, size = 2.5, colour = "grey50")+
theme_minimal()
p
p <- ggplot(eia_table_long, aes(x = Date, y = value, fill = variable)) +
geom_area() +
scale_fill_manual(values = c("CrudeOil" = "red", "Taxes" = "purple",
"DistributionMarketing" = "green", "Refining" = "blue")) +
guides(fill=guide_legend(title="Components")) +
labs(title = "Gasoline Pump Components History",
x = "Month",
y = "Retail Price (Dollars per gallon)") +
annotate("text", x = Inf, y = 0, label = "Source: U.S. Energy Information Agency",
hjust = 1, vjust = 0, size = 2.5, colour = "grey50")+
theme_minimal()
p
p <- ggplot(eia_table_long, aes(x = Date, y = value, fill = variable)) +
geom_area() +
scale_fill_manual(values = c("CrudeOil" = "red", "Taxes" = "purple",
"DistributionMarketing" = "green", "Refining" = "blue")) +
guides(fill=guide_legend(title="Components")) +
labs(title = "Gasoline Pump Components History",
x = "Month",
y = "Retail Price (Dollars per gallon)") +
annotate("text", x = Inf, y = Inf, label = "1. Crude Oil\n2. Taxes\n3. Distribution & Marketing\n4. Refining",
hjust = 1, vjust = 1, size = 3)+
theme_minimal()
p
scale_fill_brewer(palette = "Set2") +
theme_minimal() +
theme(legend.position = "top") +
guides(fill=guide_legend(title="Components")) +
labs(title = "Gasoline Pump Components History",
x = "Month",
y = "Retail Price (Dollars per gallon)")
p <- ggplot(eia_table_long, aes(x = Date, y = value, fill = variable)) +
geom_area() +
scale_fill_manual(values = c("CrudeOil" = "red", "Taxes" = "purple",
"DistributionMarketing" = "green", "Refining" = "blue")) +
guides(fill=guide_legend(title="Components")) +
labs(title = "Gasoline Pump Components History",
x = "Month",
y = "Retail Price (Dollars per gallon)")+
theme_minimal()
p
popular_genres <- c("Comedy", "Romance", "Drama", "Family", "Animation")
holiday$genres <- as.character(holiday$genres)
holiday$genres <- ifelse(holiday$genres %in% popular_genres, holiday$genres, "Other")
holiday_summary <- holiday %>%
filter(year >= 1975 & year <= 2022) %>%
group_by(year, genre) %>%
summarise(count = n()) %>%
ungroup()
holiday_summary <- holiday %>%
filter(year >= 1975 & year <= 2022) %>%
group_by(year, genres) %>%
summarise(count = n()) %>%
ungroup()
holiday_wide <- holiday_summary %>%
spread(key = genres, value = count, fill = 0)
holiday_wide <- holiday_wide %>%
mutate(total = rowSums(select(., -year)),
across(c(Comedy, Romance, Drama, Family, Animation, Other), ~ . / total)) %>%
select(-total)
holidat_long <- holidY_wide %>%
gather(key = "genre", value = "share", -year)
holiday_long <- holiday_wide %>%
gather(key = "genre", value = "share", -year)
Q4e <- ggplot(holiday_long, aes(x = year, y = share, fill = genres)) +
geom_bar(stat = "identity", position = "fill") +
scale_fill_manual(values = c("Comedy" = "green", "Romance" = "red", "Drama" = "blue",
"Family" = "yellow", "Other" = "grey", "Animation" = "pink"),
breaks = c("Animation", "Comedy", "Drama", "Family", "Romance", "Other")) +
theme_minimal() +
labs(x = "Year", y = "Share of Number of Movies by Genre", fill = "Genres") +
scale_x_continuous(breaks = seq(1975, 2022, by = 5))
Q4e
View(holiday_long)
Q4e <- ggplot(holiday_long, aes(x = year, y = share, fill = genre)) +
geom_bar(stat = "identity", position = "fill") +
scale_fill_manual(values = c("Comedy" = "green", "Romance" = "red", "Drama" = "blue",
"Family" = "yellow", "Other" = "grey", "Animation" = "pink"),
breaks = c("Animation", "Comedy", "Drama", "Family", "Romance", "Other")) +
theme_minimal() +
labs(x = "Year", y = "Share of Number of Movies by Genre", fill = "Genres") +
scale_x_continuous(breaks = seq(1975, 2022, by = 5))
Q4e
filtered_data <- holiday %>%
filter(title_type != "video")
top_genres <- filtered_data %>%
count(genres, sort = TRUE) %>%
top_n(5) %>%
pull(genres)
filtered_data1 <- filtered_data %>%
filter(genres %in% top_genres)
summary_stats <- filtered_data %>%
group_by(genres, title_type) %>%
summarise(
mean_rating = mean(average_rating, na.rm = TRUE),
median_rating = median(average_rating, na.rm = TRUE),
sd_rating = sd(average_rating, na.rm = TRUE),
min_rating = min(average_rating, na.rm = TRUE),
max_rating = max(average_rating, na.rm = TRUE),
q1_rating = quantile(average_rating, 0.25, na.rm = TRUE),
q3_rating = quantile(average_rating, 0.75, na.rm = TRUE),
mean_votes = mean(num_votes, na.rm = TRUE),
median_votes = median(num_votes, na.rm = TRUE),
sd_votes = sd(num_votes, na.rm = TRUE),
min_votes = min(num_votes, na.rm = TRUE),
max_votes = max(num_votes, na.rm = TRUE),
q1_votes = quantile(num_votes, 0.25, na.rm = TRUE),
q3_votes = quantile(num_votes, 0.75, na.rm = TRUE)
)
print(summary_stats)
filtered_data2 <- holiday %>%
filter(title_type != "video") %>%
mutate(genres = factor(genres, levels = names(sort(table(genres), decreasing = TRUE)[1:5]))) %>%
filter(genres %in% levels(genres))
ggplot(filtered_data2,
aes(x = log10(num_votes), y = average_rating,
color = title_type)) +
geom_point(alpha = 0.5) +
facet_grid(title_type ~ genres) +
geom_smooth(method = "lm", se = FALSE) +
theme_minimal() +
labs(x = "log10(Number of Votes)", y = "Average Rating") +
scale_color_brewer(palette = "Set1")
ggplot(filtered_data2,
aes(x = log10(num_votes), y = average_rating,
color = genres)) +
geom_point(alpha = 0.5) +
facet_grid(title_type ~ genres) +
geom_smooth(method = "lm", se = FALSE) +
theme_minimal() +
labs(x = "log10(Number of Votes)", y = "Average Rating") +
scale_color_brewer(palette = "Set1")
ggplot(filtered_data2,
aes(x = log10(num_votes), y = average_rating,
color = genres)) +
geom_point(alpha = 0.5) +
facet_grid(title_type ~ genres, labeller = genres) +
geom_smooth(method = "lm", se = FALSE) +
theme_minimal() +
labs(x = "log10(Number of Votes)", y = "Average Rating") +
scale_color_brewer(palette = "Set1")
ggplot(filtered_data2,
aes(x = log10(num_votes), y = average_rating,
color = genres)) +
geom_point(alpha = 0.5) +
facet_grid(title_type ~ genres, label = 'names') +
geom_smooth(method = "lm", se = FALSE) +
theme_minimal() +
labs(x = "log10(Number of Votes)", y = "Average Rating") +
scale_color_brewer(palette = "Set1")
ggplot(filtered_data2,
aes(x = log10(num_votes), y = average_rating,
color = genres)) +
geom_point(alpha = 0.5) +
facet_grid(title_type ~ genres, label = 'name') +
geom_smooth(method = "lm", se = FALSE) +
theme_minimal() +
labs(x = "log10(Number of Votes)", y = "Average Rating") +
scale_color_brewer(palette = "Set1")
View(unemp_house_prices_1)
ggplot(filtered_data2,
aes(x = log10(num_votes), y = average_rating,
color = genres)) +
geom_point(alpha = 0.5) +
facet_grid(title_type ~ genres, label = TRUE) +
geom_smooth(method = "lm", se = FALSE) +
theme_minimal() +
labs(x = "log10(Number of Votes)", y = "Average Rating") +
scale_color_brewer(palette = "Set1")
ggplot(filtered_data2,
aes(x = log10(num_votes), y = average_rating,
color = genres)) +
geom_point(alpha = 0.5) +
facet_grid(title_type ~ genres) +
geom_smooth(method = "lm", se = FALSE) +
theme_minimal() +
labs(x = "log10(Number of Votes)", y = "Average Rating") +
scale_color_brewer(palette = "Set1")
p <- ggplot(eia_table_long, aes(x = Date, y = value, fill = variable)) +
geom_area(alpha = .5) +
scale_fill_manual(values = c("CrudeOil" = "red", "Taxes" = "purple",
"DistributionMarketing" = "green", "Refining" = "blue")) +
guides(fill=guide_legend(title="Components")) +
labs(title = "Gasoline Pump Components History",
x = "Month",
y = "Retail Price (Dollars per gallon)")+
theme_minimal()
p
p <- ggplot(eia_table_long, aes(x = Date, y = value, fill = variable)) +
geom_area(alpha = .5) +
scale_fill_brewer(values = c("CrudeOil", "Taxes" ,
"DistributionMarketing" , "Refining")) +
guides(fill=guide_legend(title="Components")) +
labs(title = "Gasoline Pump Components History",
x = "Month",
y = "Retail Price (Dollars per gallon)")+
theme_minimal()
p <- ggplot(eia_table_long, aes(x = Date, y = value, fill = variable)) +
geom_area(alpha = .5) +
scale_fill_brewer(pallette = "Dark2") +
guides(fill=guide_legend(title="Components")) +
labs(title = "Gasoline Pump Components History",
x = "Month",
y = "Retail Price (Dollars per gallon)")+
theme_minimal()
p <- ggplot(eia_table_long, aes(x = Date, y = value, fill = variable)) +
geom_area(alpha = .5) +
scale_fill_brewer(palette = "Dark2") +
guides(fill=guide_legend(title="Components")) +
labs(title = "Gasoline Pump Components History",
x = "Month",
y = "Retail Price (Dollars per gallon)")+
theme_minimal()
p
ggThemeAssist:::ggThemeAssistAddin()
View(pitbull_percentages)
ggplot(pitbull_percentages) +
geom_point(aes(x = X.x, y = Y.x, color = Percentage)) +
scale_color_gradient(low = "yellow", high = "red") +
labs(
title = "NYC Pit Bull Proportions by Location",
subtitle = "Based on licensing data",
color = "Pit Bull Proportion (%)"
) +
theme_minimal() +
coord_fixed(1.3)
ggplot(pitbull_percentages) +
geom_point(aes(x = X.x, y = Y.x,
fill = Percentage)) +
scale_color_gradient(low = "yellow", high = "red") +
labs(
title = "NYC Pit Bull Proportions by Location",
subtitle = "Based on licensing data",
color = "Pit Bull Proportion (%)"
) +
theme_minimal() +
coord_fixed(1.3)
pitbull_percentages <- na.omit(pitbull_percentages)
ggplot(pitbull_percentages) +
geom_point(aes(x = X.x, y = Y.x,
fill = Percentage)) +
scale_color_gradient(low = "yellow",
high = "red") +
labs(
title = "NYC Pit Bull Proportions by Location",
subtitle = "Based on licensing data",
color = "Pit Bull Proportion (%)"
) +
theme_minimal() +
coord_fixed(1.3)
ggplot(pitbull_percentages) +
geom_point(aes(x = X.x, y = Y.x,
fill = Percentage)) +
scale_color_gradient(low = "yellow",
high = "red") +
labs(
title = "NYC Pit Bull Proportions by Location",
subtitle = "Based on licensing data",
color = "Pit Bull Proportion (%)"
) +
theme_minimal() +
coord_fixed(1.3)+
scale_fill_viridis(limit = c(0,22),
option="magma")
install.packages("viridis")
library(viridis)
ggplot(pitbull_percentages) +
geom_point(aes(x = X.x, y = Y.x,
fill = Percentage)) +
scale_color_gradient(low = "yellow",
high = "red") +
labs(
title = "NYC Pit Bull Proportions by Location",
subtitle = "Based on licensing data",
color = "Pit Bull Proportion (%)"
) +
theme_minimal() +
coord_fixed(1.3)+
scale_fill_viridis(limit = c(0,22),
option="magma")
pitbull_percentages <- breed_percentages %>%
filter(breed_rc == "Pit Bull (or Mix)",
Percentage, Percentage <23)
View(pitbull_percentages)
pitbull_percentages <- pitbull_percentages %>%
filter(Percentage >= 0.23)
View(pitbull_percentages)
pitbull_percentages <- breed_percentages %>%
filter(breed_rc == "Pit Bull (or Mix)") %>%
pitbull_percentages1 <- pitbull_percentages %>%
filter(Percentage >= 0.23)
pitbull_percentages1 <- pitbull_percentages %>%
filter(Percentage >= 0.23)
View(pitbull_percentages1)
ggplot(pitbull_percentages) +
geom_point(aes(x = X.x, y = Y.x,
fill = Percentage)) +
scale_color_gradient(low = "yellow",
high = "red") +
labs(
title = "NYC Pit Bull Proportions by Location",
subtitle = "Based on licensing data",
color = "Pit Bull Proportion (%)"
) +
theme_minimal() +
coord_fixed(1.3)+
scale_fill_viridis(limit = c(0,22),
option="magma")
ggplot(pitbull_percentages) +
geom_point(aes(x = X.x, y = Y.x,
fill = Percentage,
color = Percentage)) +
scale_color_gradient(low = "yellow",
high = "red") +
labs(
title = "NYC Pit Bull Proportions by Location",
subtitle = "Based on licensing data",
color = "Pit Bull Proportion (%)"
) +
theme_minimal() +
coord_fixed(1.3)+
scale_fill_viridis(limit = c(0,22),
option="magma")
library(gganimate)
influence_data <- as.data.frame(original_variable_influence)
#| include: false
library(tidyverse)
library(socviz)
library(lubridate)
library(knitr)
library(kableExtra)
library(ggthemes)
library(ggthemr)
library(ggthemes)
library(ggrepel)
library(hrbrthemes)
library(hexbin)
library(ggforce)
library(RColorBrewer)
library(ggplot2)
library(readxl)
library(plotly)
knitr::opts_chunk$set(fig.width=8, fig.height=5,
echo = T, eval = T,
message=F, warning = F, fig.cap = " ")
theme_set(theme_classic() +
theme(strip.background =element_rect(fill="lightgray"),
axis.title.x = element_text(size=rel(1)),
axis.title.y = element_text(size=rel(1)),
))
# Load the dataset
nba_data <- read_excel("C:/Users/nicka/OneDrive/Desktop/Fall 2023/Data 399/NBA_Goat.xlsx")
# View(nba_data)
#| results: asis
#| echo: false
#|
rmarkdown::paged_table(nba_data)
# Define the weights for each variable
weights <- c(PER_playoffs = 7,
Offensive_win_shares_playoffs_per_season = 8,
Offensive_rating_playoffs = 10,
VORP_playoffs_per_season = 11,
Box_plus_minus_playoffs = 12,
Number_of_Championships = 14,
Win_shares_per_48_playoffs = 13,
Defensive_win_shares_playoffs_per_season = 8)
# Standardize the relevant columns
columns_to_standardize <- c('PER_playoffs', 'Offensive_win_shares_playoffs_per_season',
'Offensive_rating_playoffs', 'VORP_playoffs_per_season',
'Box_plus_minus_playoffs', 'Number_of_Championships',
'Win_shares_per_48_playoffs', 'Defensive_win_shares_playoffs_per_season')
nba_data[columns_to_standardize] <- scale(nba_data[columns_to_standardize])
# Calculate the composite score
nba_data$Composite_Score_Standardized <- with(nba_data,
PER_playoffs * weights['PER_playoffs'] +
Offensive_win_shares_playoffs_per_season * weights['Offensive_win_shares_playoffs_per_season'] +
Offensive_rating_playoffs * weights['Offensive_rating_playoffs'] +
VORP_playoffs_per_season * weights['VORP_playoffs_per_season'] +
Box_plus_minus_playoffs * weights['Box_plus_minus_playoffs'] +
Number_of_Championships * weights['Number_of_Championships'] +
Win_shares_per_48_playoffs * weights['Win_shares_per_48_playoffs'] +
Defensive_win_shares_playoffs_per_season * weights['Defensive_win_shares_playoffs_per_season'])
# Finding the player with the highest composite score in each position
best_composite_scores_by_position_standardized <- nba_data %>%
group_by(Position) %>%
top_n(1, Composite_Score_Standardized) %>%
select(Player, Position, Composite_Score_Standardized)
# Print the results
print(best_composite_scores_by_position_standardized)
rmarkdown::paged_table(best_composite_scores_by_position_standardized)
p <- ggplot(data = nba_data,
aes(x = Composite_Score_Standardized,
y = reorder(Player, +Composite_Score_Standardized),
fill = Composite_Score_Standardized)) +
geom_point(color = "#0072B2", size = 1.75) +
geom_text(aes(label = ""), hjust = -.25,
size = 2) +
facet_wrap(.~Position, scales = "free_y") +
scale_x_continuous(
name = NULL,
lim = c(-100, 200)) +
scale_y_discrete(name = NULL) +
labs(title = 'Player Composite Score') +
theme_minimal() +
theme(
axis.text.x = element_text(size = rel(.75)),
axis.text.y = element_text(size = rel(.75)),
plot.title = element_text(size = rel(1.5),
hjust = 0.5,
face = 'bold'),
strip.text = element_text(size = rel(1.25),
face = 'bold')) +
theme(legend.position = "none")+labs(x = NULL, y = "Player")
fig <- ggplotly(p)
fig
library(FactoMineR)
library(factoextra)
library(caret)
predictors <- scale(nba_data[, c('PER_playoffs', 'Offensive_win_shares_playoffs_per_season',
'Offensive_rating_playoffs', 'VORP_playoffs_per_season',
'Box_plus_minus_playoffs', 'Number_of_Championships',
'Win_shares_per_48_playoffs', 'Defensive_win_shares_playoffs_per_season')])
# Perform PCA
pca_result <- PCA(predictors, graph = FALSE)
pca_scores <- data.frame(pca_result$ind$coord[, 1:5])
response <- nba_data$Composite_Score_Standardized
regression_data <- cbind(pca_scores, response)
lm_model <- lm(response ~ ., data = regression_data)
summary(lm_model)
# Get coefficients from the regression model
regression_coefficients <- coef(lm_model)[-1]
pca_loadings <- pca_result$var$coord
original_variable_influence <- pca_loadings %*%
matrix(regression_coefficients, ncol = 1)
original_variable_influence
library(gganimate)
influence_data <- as.data.frame(original_variable_influence)
influence_data$Variable <- rownames(original_variable_influence)
names(influence_data) <- c("Influence", "Variable")
Coefficients <- ggplot(influence_data,
aes(y = Variable, x = Influence,
fill = Variable)) +
geom_bar(stat = "identity") +
theme_minimal() +
coord_flip() +
xlab("Coefficient Value") +
ylab("Coefficients") +
ggtitle("Coefficient Plot of Original Variables") +
theme(legend.position = "bottom")+
theme(axis.text.x = element_blank()) +
theme(legend.text = element_text(size = 5))+
theme(legend.title=element_blank()) +
enter_fade()+
exit_fade()
Coefficients
rmarkdown::paged_table(Coefficients)
cm <- caret::confusionMatrix(original_variable_influence)
cm <- caret::confusionMatrix(lm_model
)
cm <- caret::confusionMatrix(influence_data)
View(nba_data)
runApp('nba_players_shiny/Shiny.R')
runApp('nba_players_shiny/nba_players_shiny.R')
install.packages("devtools")
library("devtools")
